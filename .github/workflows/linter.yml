---
#################################
#################################
## Super Linter GitHub Actions ##
#################################
#################################
name: Lint & Test Code Base

#############################
# Start the job on all pull requests #
#############################
on:
  push

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper
          # list of changed files within `super-linter`
          fetch-depth: 0

      - name: Define Super-Linter Image Details
        id: super_linter_image
        run: |
          echo "IMAGE_NAME=ghcr.io/super-linter/super-linter" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=slim-v7.4.0" >> $GITHUB_OUTPUT # Specify the version you want to use and cache

      - name: Cache Docker Image
        id: cache-docker-image
        uses: actions/cache@v4
        with:
          path: /tmp/super-linter-image.tar
          key: ${{ runner.os }}-docker-${{ steps.super_linter_image.outputs.IMAGE_NAME }}-${{ steps.super_linter_image.outputs.IMAGE_TAG }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ steps.super_linter_image.outputs.IMAGE_NAME }}-

      - name: Load Docker Image from Cache or Pull
        run: |
          IMAGE_TAR_PATH="/tmp/super-linter-image.tar"
          IMAGE_TO_PULL="${{ steps.super_linter_image.outputs.IMAGE_NAME }}:${{ steps.super_linter_image.outputs.IMAGE_TAG }}"

          if [ "${{ steps.cache-docker-image.outputs.cache-hit }}" = "true" ]; then
            echo "Cache hit. Loading Docker image from $IMAGE_TAR_PATH..."
            docker load --input $IMAGE_TAR_PATH
            # Optionally, verify the image loaded correctly, though 'docker load' usually suffices
            docker images $IMAGE_TO_PULL
          else
            echo "Cache miss. Pulling Docker image $IMAGE_TO_PULL..."
            docker pull $IMAGE_TO_PULL
            echo "Saving Docker image to $IMAGE_TAR_PATH for caching..."
            mkdir -p $(dirname $IMAGE_TAR_PATH) # Ensure directory exists
            docker save $IMAGE_TO_PULL --output $IMAGE_TAR_PATH
          fi

      ################################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v7
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_HTML: false
          VALIDATE_HTML_PRETTIER: false
          VALIDATE_CSS_PRETTIER: false
          VALIDATE_JAVASCRIPT_PRETTIER: false
          VALIDATE_JSON_PRETTIER: false
          VALIDATE_YAML_PRETTIER: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_PYTHON_PYINK: false
          VALIDATE_CHECKOV: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUBERNETES_KUBECONFORM_OPTIONS: -ignore-missing-schemas
          # plugins.js contains different datatables plugins that we are self-hosting
          # rather than using CDN/NPM, as described here:
          # https://datatables.net/plug-ins/sorting/natural#Browser
          FILTER_REGEX_EXCLUDE: plugins\.js
  test:
    name: Test Code Base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Dependencies
        run: pip install -r .github/workflows/requirements-pytest.txt
      - name: Test with pytest
        run: pytest . --cov
